The problem motivates the paper is that large-scale streaming services need to provide high throughput, low latency, and adaptability(e.g., quickly handle failure and straggler). There exist two main execution models: 1.continuous operators(e.g. Flink)[1]. The benefit is that such design will minimize communication between worker and master.[2] However, such systems suffer from bad adaptability, since they have to replay everything from the last checkpoint. 2. Micro-batch model[3]. It provides good adaptability since you only have to replay the operations in the failed nodes(which can even run in parallel), but at the cost of rather high latency during normal execution(because it imposes a hard barrier between micro-batches)                                  
Drizzle is built on the top of the micro-batches system but can provide both low latency and dynamic scheduling(which means good adaptability) by using pre-schedule reduce tasks and group schedule micro-batches. Pre-schedule reduce tasks means that we can upstream tasks are scheduled with the metadata of the information of reducer. Thus, the reducers don't need to ask the master for these metadata(avoiding coordination). Group scheduling means that we can reuse scheduling decisions[4](i.e., we can schedule multiple jobs at once) and amortize the scheduling overheads. 

Weakness: The ideas of this paper is excellent but also very straightforward. The authors pointed out that selecting group size is a tough decision, but they didn't provide enough details(e.g., a formula or an algorithm) to derive the optimal group size. Also, the group size could be changed if the environment changes.



[1]"In such systems, user programs are similarly converted to a DAG of operators, and each operator is placed on a processor as a long-running task."
[2]Becuase continuous operators try to eliminate hard barriers as many as possible. 
[3]"The computation consists of a phase whereby all parallel nodes in the system perform some local computation, followed by a blocking barrier that enables all nodes to communicate with each other, after which the process repeats itself."
[4] The authors observe that "in the stream
processing jobs, the computation DAG used to process micro batches is largely static, and changes infrequently."